There are N stones, numbered 1,2,…,N. For each i (1≤i≤N), the height of Stone i is hi

.

There is a frog who is initially on Stone 1
. He will repeat the following action some number of times to reach Stone N

:

    If the frog is currently on Stone i

, jump to Stone i+1 or Stone i+2. Here, a cost of |hi−hj| is incurred, where j

    is the stone to land on.

Find the minimum possible total cost incurred before the frog reaches Stone N
CODE
#include<bits/stdc++.h>
using namespace std;

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	int n;
	cin>>n;
    int a[n];
    for (int i = 0; i < n; i++)
    {
        cin>>a[i];
    }

    int dp[n];
    dp[0]=0;
    dp[1]=abs(a[1]-a[0]);

    for(int i=2;i<n;i++)
    {
        dp[i]=min(dp[i-1]+ abs(a[i]-a[i-1]) ,dp[i-2]+ abs(a[i]-a[i-2]) );
    }
    cout<<dp[n-1]<<"\n";
    
}
