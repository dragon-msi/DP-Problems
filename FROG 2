There are N stones, numbered 1,2,…,N. For each i (1≤i≤N), the height of Stone i is hi

.

There is a frog who is initially on Stone 1. He will repeat the following action some number of times to reach Stone N:
    If the frog is currently on Stone i, jump to one of the following: Stone i+1,i+2,…,i+K. Here, a cost of |hi−hj| is incurred, where j
    is the stone to land on.

Find the minimum possible total cost incurred before the frog reaches Stone N.
SOlution :

#include<bits/stdc++.h>
using namespace std;

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	int n,k;
	cin>>n>>k;
    int a[n];
    for (int i = 0; i < n; i++)
    {
        cin>>a[i];
    }
   
    int dp[n];
    dp[0]=0;
    for(int i=1;i<n;i++)
      dp[i]=INT_MAX;
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<=i+k;j++)
        {
            if(j<n)
            dp[j]=min(dp[j], abs(a[j]-a[i]) + dp[i]);
        }

    }
    cout<<dp[n-1]<<"\n";
    
}
